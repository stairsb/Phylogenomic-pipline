import sys
import os
import argparse
import re
import numpy as np
import sge_scriptgen

parser = argparse.ArgumentParser()
parser.add_argument(
    "-u",
    "--unaln",
    action="store",
    required=True,
    help=
    "Path to directory containing all the unaligned FASTA files generated by domtbl2unaln."
)
parser.add_argument(
    "-m",
    "--markers",
    action="store",
    required=True,
    help="Path to the directory containing the individual marker HMMs.")
parser.add_argument(
    "--suffix",
    action="store",
    required=False,
    default="[.]fasta$",
    help=
    "Regular expression pattern matching the suffix of protein FASTA files. Default: ([.]fa$|[.]fasta$|[.]faa$)"
)
parser.add_argument(
    "--remove_gapped_seqs_post",
    action="store_true",
    required=False,
    help=
    "Pass this flag to use the custom remove_gapped_seqs.py script as a last step. Ask Kevin. Requires download of https://github.com/Michigan-Mycology/Chytrid-Phylogenomics repo, installation of SCGid (amsesk), and set CHYTRID_PHYLO."
)
parser.add_argument("--jobs",
                    action="store",
                    required=False,
                    default=10,
                    help="Number of batch jobs scripts to split work into.")
args = parser.parse_args()

NJOBS = int(args.jobs)
UNALN_PATH = os.path.abspath(args.unaln)
MARKERS_PATH = os.path.abspath(args.markers)
SUFFIX_PATTERN = re.compile(args.suffix)

todo = [
    x for x in os.listdir(UNALN_PATH)
    if re.search(SUFFIX_PATTERN, x) is not None
]
todo = np.array(todo)
todo_spl = np.array_split(todo, NJOBS)

jobname = "HmAl"

for idx, chunk in enumerate(todo_spl):
    sg = sge_scriptgen.SgeScriptGenerator(jobname=f"{jobname}_{idx}",
                                          threads=1,
                                          memory="2G")
    for line in chunk:
        sg.add_command(
            f"hmmalign --trim --amino -o {line.replace('.fasta','.aa.msa')} {os.path.join(MARKERS_PATH, line.replace('.fasta','.hmm'))} {line}"
        )
        sg.add_command(
            f"esl-reformat --replace=x:- --gapsym=- -o {line.replace('.fasta','.esltmp')} afa {line.replace('.fasta','.aa.msa')}"
        )
        sg.add_command(
            "perl -p -e 'if (! /^>/) {{ s/[ZBzbXx\*]/-/g }}' {} > {}".format(
                line.replace('.fasta', '.esltmp'),
                line.replace('.fasta', '.clnaln')))
        sg.add_command(
            f"trimal -resoverlap 0.50 -seqoverlap 60 -in {line.replace('.fasta','.clnaln')} -out {line.replace('.fasta','.aa.filter')}"
        )
        sg.add_command(
            f"trimal -automated1 -fasta -in {line.replace('.fasta','.aa.filter')} -out {line.replace('.fasta','.aa.trim')}"
        )
        #Ask Kevin. If you want to remove highly gapped sequences... not currently available on this repo.
        if args.remove_gapped_seqs_post:
            sg.add_command(
            f"python $CHYTRID_PHYLO/scripts/python/remove_gapped_seqs.py {line.replace('.fasta', '.aa.trim')} > {line.replace('.fasta', '.aa.trim.rmgapped')}"
        )

    sg.write()
